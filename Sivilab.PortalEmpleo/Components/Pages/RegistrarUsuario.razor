@page "/registro"  
@using System.Net.Http.Json 
@using Microsoft.AspNetCore.Components.Web
@using System.Text.RegularExpressions


<style>
    .registro-container {
        --primary: #235B4E;
        --secondary: #BC955C;
        --bg-light: #f3f4f6;
        --text-dark: #235B4E;
        --text-light: #ffffff;
        --error: #dc3545;
        --success: #28a745;
        --gray-300: #d1d5db;  
        --gray-500: #6b7280;
        font-family: 'Roboto', sans-serif;
    }

        .registro-container * {
            box-sizing: border-box;
        }

        .registro-container .nav-links {
            background-color: var(--primary);
            display: flex;
            justify-content: center;
            gap: 1rem;
            padding: 0.5rem 0;
            border-top: 2px solid var(--secondary);
        }

            .registro-container .nav-links a {
                color: var(--text-light);
                text-decoration: none;
            }

                .registro-container .nav-links a:hover {
                    color: var(--secondary);
                }

        .registro-container .main-content {
            display: flex;
            gap: 2rem;
            padding: 2rem 3rem;
            max-width: 1200px;
            margin: 0 auto;
        }

        .registro-container .sidebar {
            background: white;
            padding: 2rem;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            width: 250px;
        }

            .registro-container .sidebar h3 {
                color: var(--primary);
                margin-bottom: 1rem;
            }

            .registro-container .sidebar a {
                color: var(--secondary);
                text-decoration: none;
                font-weight: 600;
            }

        .registro-container .registro-curp {
            flex: 1;
            background: white;
            padding: 3rem;
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        }

        .registro-container .curp-busqueda {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
        }

            .registro-container .curp-busqueda input {
                flex: 1;
                padding: 0.85rem;
                border: 1px solid var(--primary);
            }

            .registro-container .curp-busqueda button {
                background: var(--primary);
                color: white;
                border: none;
                padding: 0 1rem;
                cursor: pointer;
            }

        .registro-container .message {
            padding: 0.75rem;
            margin: 1rem 0;
            border-radius: 4px;
        }

        .registro-container .error {
            background: #f8d7da;
            color: var(--error);
            border: 1px solid #f5c6cb;
        }

        .registro-container .success {
            background: #d4edda;
            color: var(--success);
            border: 1px solid #c3e6cb;
        }

        .registro-container .stepper {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 2rem 0;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 8px;
            flex-wrap: wrap;
        }

        .registro-container .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            flex: 1;
            min-width: 80px;
        }

            .registro-container .step .circle {
                width: 35px;
                height: 35px;
                border-radius: 50%;
                background: var(--gray-300);
                color: var(--gray-500);
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
            }

            .registro-container .step.active .circle {
                background: var(--primary);
                color: white;
            }

            .registro-container .step.completed .circle {
                background: var(--secondary);
                color: white;
            }

            .registro-container .step .label {
                margin-top: 0.5rem;
                font-size: 0.8rem;
                text-align: center;
            }

        .registro-container .formulario-datos {
            background: #fefefe;
            padding: 2rem;
            border: 1px solid var(--primary);
            border-radius: 8px;
            position: relative;
        }

        .registro-container .form-step {
            display: none;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }

            .registro-container .form-step.active {
                display: grid;
            }

        .registro-container .form-group {
            display: flex;
            flex-direction: column;
        }

            .registro-container .form-group.full-width {
                grid-column: 1 / -1;
            }

            .registro-container .form-group label {
                margin-bottom: 0.4rem;
                font-weight: bold;
                color: var(--text-dark);
            }

            .registro-container .form-group input,
            .registro-container .form-group select,
            .registro-container .form-group textarea {
                padding: 0.7rem;
                border: 1px solid var(--gray-300);
                border-radius: 4px;
            }

        .registro-container .step-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 1.5rem;
            grid-column: 1 / -1;
        }

        .registro-container .btn {
            padding: 0.8rem 1.6rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
        }

        .registro-container .btn-anterior {
            background: var(--gray-300);
            color: var(--text-dark);
        }

        .registro-container .btn-siguiente {
            background: var(--primary);
            color: white;
        }

        .registro-container .btn-registrar {
            background: white;
            border: 2px solid #691C32;
            color: #691C32;
        }
</style>

<div class="registro-container">
    <div class="nav-links">
        <a href="/">Inicio</a>
        <a href="/#ofertas">Ofertas</a>
        <a href="/#eventos">Eventos</a>
        <a href="/#programas">Programas</a>
    </div>

    <div class="main-content">
        <aside class="sidebar">
            <h3>Accesos rápidos</h3>
            <ul>
                <li><a href="https://www.gob.mx/curp/" target="_blank">Buscar CURP</a></li>
                <li><a href="/#ofertas">Ofertas destacadas</a></li>
                <li><a href="/#eventos">Próximos eventos</a></li>
                <li><a href="/#programas">Programas de empleo</a></li>
            </ul>
        </aside>

        <section class="registro-curp">
            <h2>Buscar CURP</h2>
            
            <div class="curp-busqueda">
                <input type="text" @bind="curpInput" @bind:event="oninput" placeholder="Ingresa tu CURP" />
                
               
                <button type="button" id="btnBuscar" @onclick="(()=>BuscarCurp())">
                    Buscar
                </button>


                <p style="color:red;">Debug: CURP = '@curpInput'</p>
                <p style="color:red;">Debug: mostrarFormulario = @mostrarFormulario</p>
                <p style="color:red;">Debug: Error = @errorMessage</p>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="message error">@errorMessage</div>
            }

            @if (mostrarFormulario)
            {
                <div class="stepper">
                    @for (int i = 1; i <= 8; i++)
                    {
                        <div class="step @(currentStep == i ? "active" : "") @(currentStep > i ? "completed" : "")">
                            <div class="circle">@i</div>
                            <div class="label">@GetStepLabel(i)</div>
                        </div>
                    }
                </div>

                <div class="formulario-datos">
                    @for (int step = 1; step <= 8; step++)
                    {
                        <div class="form-step @(currentStep == step ? "active" : "")">
                            @RenderStepContent(step)
                        </div>
                    }
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="message success">@successMessage</div>
            }
        </section>
    </div>
</div>


@code {

    private async Task BuscarCurp()
    {
        Console.WriteLine("BuscarCurp() fue llamado");
        Console.WriteLine($" CURP ingresado: {curpInput}");
        await MostrarFormulario();
    }

    private string curpInput = "";
    private int currentStep = 1;
    private bool mostrarFormulario = false;
    private string errorMessage = "";
    private string successMessage = "";

    private Dictionary<string, string> formData = new Dictionary<string, string>
    {
        ["curp"] = "", ["nombre"] = "", ["apellidoPaterno"] = "", ["apellidoMaterno"] = "", ["email"] = "", ["telefono"] = "",
        ["fechaNacimiento"] = "", ["genero"] = "", ["estadoCivil"] = "", ["nacionalidad"] = "Mexicana",
        ["estado"] = "", ["municipio"] = "", ["colonia"] = "", ["codigoPostal"] = "", ["direccion"] = "",
        ["nivelEstudios"] = "", ["carrera"] = "", ["institucion"] = "", ["añoEgreso"] = "", ["cedulaProfesional"] = "",
        ["empresaAnterior"] = "", ["puestoAnterior"] = "", ["tiempoExperiencia"] = "", ["sectorExperiencia"] = "", ["descripcionExperiencia"] = "",
        ["certificaciones"] = "", ["habilidades"] = "", ["idiomas"] = "", ["nivelIngles"] = "",
        ["tieneDependientes"] = "No", ["numeroDependientes"] = "0", ["tiposDependientes"] = "",
        ["disponibilidadHoraria"] = "", ["disponibilidadViaje"] = "No", ["salarioDeseado"] = "", ["comentarios"] = ""
    };

    private Dictionary<int, List<(string key, string label, string type, bool required, string[]? options)>> stepFields = new()
    {
        [1] = new() {
            ("nombre", "Nombre", "text", true, null),
            ("apellidoPaterno", "Apellido Paterno", "text", true, null),
            ("apellidoMaterno", "Apellido Materno", "text", false, null),
            ("email", "Correo electrónico", "email", true, null),
            ("telefono", "Teléfono", "tel", false, null)
        },
        [2] = new() {
            ("fechaNacimiento", "Fecha de Nacimiento", "date", true, null),
            ("genero", "Género", "select", true, new[] { "", "Masculino", "Femenino", "Otro" }),
            ("estadoCivil", "Estado Civil", "select", false, new[] { "", "Soltero", "Casado", "Divorciado", "Viudo", "Unión Libre" }),
            ("nacionalidad", "Nacionalidad", "text", false, null)
        },
        [3] = new() {
            ("estado", "Estado", "text", true, null),
            ("municipio", "Municipio", "text", true, null),
            ("colonia", "Colonia", "text", false, null),
            ("codigoPostal", "Código Postal", "text", false, null),
            ("direccion", "Dirección Completa", "textarea", false, null)
        },
        [4] = new() {
            ("nivelEstudios", "Nivel de Estudios", "select", false, new[] { "", "Primaria", "Secundaria", "Preparatoria", "Carrera Técnica", "Licenciatura", "Maestría", "Doctorado" }),
            ("carrera", "Carrera/Especialidad", "text", false, null),
            ("institucion", "Institución", "text", false, null),
            ("añoEgreso", "Año de Egreso", "number", false, null),
            ("cedulaProfesional", "Cédula Profesional", "text", false, null)
        },
        [5] = new() {
            ("empresaAnterior", "Última Empresa", "text", false, null),
            ("puestoAnterior", "Último Puesto", "text", false, null),
            ("tiempoExperiencia", "Años de Experiencia", "select", false, new[] { "", "Sin experiencia", "Menos de 1 año", "1-2 años", "3-5 años", "6-10 años", "Más de 10 años" }),
            ("sectorExperiencia", "Sector de Experiencia", "text", false, null),
            ("descripcionExperiencia", "Descripción de Experiencia", "textarea", false, null)
        },
        [6] = new() {
            ("certificaciones", "Certificaciones", "textarea", false, null),
            ("habilidades", "Habilidades Técnicas", "textarea", false, null),
            ("idiomas", "Idiomas", "text", false, null),
            ("nivelIngles", "Nivel de Inglés", "select", false, new[] { "", "Sin conocimientos", "Básico", "Intermedio", "Avanzado", "Nativo" })
        },
        [7] = new() {
            ("tieneDependientes", "¿Tienes dependientes económicos?", "select", false, new[] { "No", "Sí" }),
            ("numeroDependientes", "Número de dependientes", "number", false, null),
            ("tiposDependientes", "Tipos de dependientes", "text", false, null)
        },
        [8] = new() {
            ("disponibilidadHoraria", "Disponibilidad Horaria", "select", false, new[] { "", "Tiempo completo", "Medio tiempo", "Por horas", "Fines de semana" }),
            ("disponibilidadViaje", "Disponibilidad para viajar", "select", false, new[] { "No", "Sí" }),
            ("salarioDeseado", "Salario Deseado", "text", false, null),
            ("comentarios", "Comentarios Adicionales", "textarea", false, null)
        }
    };

    private async Task MostrarFormulario()
    {
        Console.WriteLine($"Debug: Entrando a MostrarFormulario con CURP = {curpInput}");

        errorMessage = "";
        successMessage = "";
        formData["curp"] = curpInput;

        if (string.IsNullOrWhiteSpace(curpInput))
        {
            errorMessage = "Por favor ingresa tu CURP.";
            mostrarFormulario = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        if (!ValidateCURP(curpInput))
        {
            errorMessage = "El formato de CURP ingresado no es válido. Verifica e intenta nuevamente.";
            mostrarFormulario = false;
            await InvokeAsync(StateHasChanged);
            return;
        }

        mostrarFormulario = true;
        currentStep = 1;
        await InvokeAsync(StateHasChanged);
    }


    private bool ValidateCURP(string curp)
    {
        var regex = new Regex(@"^[A-Z0-9]{18}$");
        return regex.IsMatch(curp?.ToUpper() ?? "");
    }

    private string GetStepLabel(int step) => step switch
    {
        1 => "Datos", 2 => "Información", 3 => "Ubicación", 4 => "Estudios",
        5 => "Experiencia", 6 => "Certificaciones", 7 => "Dependientes", 8 => "Otros", _ => ""
    };

    private void ChangeStep(int step)
    {
        if (step >= 1 && step <= 8)
            currentStep = step;
    }

    private void NextStep()
    {
        if (ValidateCurrentStep())
        {
            if (currentStep < 8)
                currentStep++;
            else
                RegistrarUsuarioOriginal();
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
            currentStep--;
    }

    private bool ValidateCurrentStep()
    {
        errorMessage = "";
        if (stepFields.ContainsKey(currentStep))
        {
            var requiredFields = stepFields[currentStep].Where(f => f.required);
            foreach (var field in requiredFields)
            {
                if (string.IsNullOrWhiteSpace(formData[field.key]))
                {
                    errorMessage = $"Por favor completa el campo: {field.label}";
                    return false;
                }
            }
        }
        return true;
    }

    private void RegistrarUsuarioOriginal()
    {
        successMessage = "¡Registro completado exitosamente! Te contactaremos pronto.";
        mostrarFormulario = false;
        currentStep = 1;
        curpInput = "";

        foreach (string key in formData.Keys.ToList())
        {
            formData[key] = key == "nacionalidad" ? "Mexicana" : (key == "tieneDependientes" || key == "disponibilidadViaje" ? "No" : (key == "numeroDependientes" ? "0" : ""));
        }
    }

    private RenderFragment RenderField(string key, string label, string type, bool required, string[]? options) =>
    @<div class="form-group @(type == "textarea" || key == "direccion" || key == "descripcionExperiencia" || key == "certificaciones" || key == "habilidades" ? "full-width" : "")">
        <label>@label@(required ? " *" : ""):</label>
        @if (type == "select")
        {
            <select @onchange="@(e => formData[key] = e.Value?.ToString() ?? "")">
                @foreach (var option in options ?? new string[0])
                {
                    <option value="@option" selected="@(formData[key] == option)">@option</option>
                }
            </select>
        }
        else if (type == "textarea")
        {
            <textarea @bind="formData[key]" placeholder="@(GetPlaceholder(key))"></textarea>
        }
        else if (type == "number")
        {
            <input type="number" @bind="formData[key]" min="@(key == "añoEgreso" ? "1980" : "0")" max="@(key == "añoEgreso" ? "2025" : "")" />
        }
        else
        {
            <input type="@type" @bind="formData[key]" readonly="@(key == "curp")" placeholder="@(GetPlaceholder(key))" />
        }
    </div>;

    private string GetPlaceholder(string key) => key switch
    {
        "direccion" => "Calle, número, referencias...",
        "descripcionExperiencia" => "Describe tus principales logros y responsabilidades...",
        "certificaciones" => "Lista tus certificaciones separadas por comas...",
        "habilidades" => "Lista tus habilidades técnicas separadas por comas...",
        "idiomas" => "Ej: Español, Inglés, Francés",
        "comentarios" => "Información adicional que consideres relevante...",
        _ => ""
    };

    private RenderFragment RenderStepContent(int step)
    {
        if (!stepFields.ContainsKey(step))
            return @<div>Paso no encontrado</div>;

        return @<RenderFragment>
            @if (step == 1)
            {
                @RenderField("curp", "CURP", "text", true, null)
            }

            @foreach (var field in stepFields[step])
            {
                @RenderField(field.key, field.label, field.type, field.required, field.options)
            }

            <div class="step-buttons">
                @if (step > 1)
                {
                    <button class="btn btn-anterior" @onclick="PreviousStep">Anterior</button>
                }
                else
                {
                    <div></div>
                }

                @if (step < 8)
                {
                    <button class="btn btn-siguiente" @onclick="NextStep">Siguiente</button>
                }
                else
                {
                    <button class="btn btn-registrar" @onclick="NextStep">Registrar</button>
                }
            </div>
        </RenderFragment>;
    }
}
