@page "/portal-empleo"
@using System.Net.Http.Json
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<header style="background-color: #235B4E; color: white; padding: 1rem 2rem; display:flex; justify-content:space-between; align-items:center;">
    <h1>Portal de Empleo</h1>
    <nav>
        <a href="/registro" style="color: white; margin-right: 1rem;">Regístrate</a>
        <a href="#" style="color: white;">Iniciar sesión</a>
    </nav>
</header>

<main style="max-width: 1100px; margin: 2rem auto; display: flex; gap: 2rem; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
    <section style="flex: 0 0 280px; background: #fff; padding: 1rem; border-radius: 6px; box-shadow: 0 0 6px #ccc;">
        <h2>Filtros de búsqueda</h2>
        <EditForm Model="@filterModel" OnValidSubmit="ApplyFilters">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div style="margin-bottom: 0.8rem;"
            >
                <label>Tipo de empleo:</label>
                <select @bind="filterModel.Tipo" style="width: 100%; padding: 0.3rem;">
                    <option value="">Todos</option>
                    <option value="tiempo-completo">Tiempo completo</option>
                    <option value="medio-tiempo">Medio tiempo</option>
                    <option value="remoto">Remoto</option>
                </select>
            </div>
            <div style="margin-bottom: 0.8rem;">
                <label>Escolaridad:</label>
                <select @bind="filterModel.Escolaridad" style="width: 100%; padding: 0.3rem;">
                    <option value="">Todas</option>
                    <option value="ninguna">Ninguna</option>
                    <option value="primaria">Primaria</option>
                    <option value="secundaria">Secundaria</option>
                    <option value="preparatoria">Preparatoria</option>
                    <option value="titulo">Título universitario</option>
                </select>
            </div>
            <div style="margin-bottom: 0.8rem;">
                <label>Discapacidad:</label>
                <select @bind="filterModel.Discapacidad" style="width: 100%; padding: 0.3rem;">
                    <option value="">Indistinto</option>
                    <option value="ninguna">Ninguna</option>
                    <option value="auditiva">Auditiva</option>
                    <option value="visual">Visual</option>
                    <option value="comunicacion">Comunicación</option>
                    <option value="motora">Motriz</option>
                    <option value="intelectual leve">Intelectual leve</option>
                    <option value="otras">Otras</option>
                </select>
            </div>
            <div style="margin-bottom: 0.8rem;">
                <label>Edad mínima:</label>
                <InputNumber @bind-Value="filterModel.Edad" style="width: 100%; padding: 0.3rem;" />
            </div>
            <div style="margin-bottom: 0.8rem;">
                <label>Salario mínimo (MXN):</label>
                <InputNumber @bind-Value="filterModel.Salario" style="width: 100%; padding: 0.3rem;" />
            </div>
            <button type="submit" style="padding: 0.5rem 1rem; background:#235B4E; color:white; border:none; border-radius:4px; cursor:pointer;">Aplicar filtros</button>
        </EditForm>
    </section>

    <section style="flex: 1;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
            <h2>Vacantes (@filteredJobs.Count)</h2>
            <div>
                <label>Ordenar por: </label>
                <select id="ordenar" @bind="sortCriteria" style="padding: 0.3rem; border-radius:4px; border:1px solid #ccc;">
                    <option value="fecha">Fecha publicación (más reciente)</option>
                    <option value="salario">Salario (mayor a menor)</option>
                </select>
                <button @onclick="MostrarFavoritos" style="margin-left: 1rem; padding: 0.4rem 1rem; background:#BC955C; border:none; border-radius:4px; cursor:pointer;">Ver Favoritos</button>
            </div>
        </div>

        @if (paginatedJobs.Count == 0)
        {
            <p>No se encontraron vacantes con esos filtros.</p>
        }
        else
        {
            foreach (var job in paginatedJobs)
            {
                <div style="background: #fff; padding: 1rem; margin-bottom: 1rem; border-left: 6px solid #BC955C; box-shadow: 0 0 8px rgba(0,0,0,0.1); border-radius: 4px; position: relative;">
                    <h3>@job.Titulo</h3>
                    <p><strong>@job.Empresa</strong> - @job.Ubicacion</p>
                    <p>@job.Descripcion</p>
                    <p><strong>Escolaridad:</strong> @job.Escolaridad | <strong>Experiencia:</strong> @job.Experiencia | <strong>Discapacidad:</strong> @job.Discapacidad</p>
                    <p><strong>Edad:</strong> @job.Edad años | <strong>Salario:</strong> $@job.Salario MXN</p>
                    <button @onclick="async () => await ToggleFavorito(job)"
                            style='position: absolute; top: 1rem; right: 1rem; background:none; border:none; font-size: 1.5rem; cursor: pointer; color:@(EstaEnFavoritos(job) ? "red" : "#ccc")'
                            title="Agregar/quitar favorito">
                        ❤
                    </button>
                </div>
            }

            <div style="margin-top: 1rem; text-align: center;">
                <button @onclick="AnteriorPagina" disabled="@(!PuedeRetroceder)" style="margin-right: 1rem;">Anterior</button>
                @for (int i = 1; i <= totalPaginas; i++)
                {
                    <button @onclick="() => CambiarPagina(i)" disabled="@(i == paginaActual)" style="margin-right: 0.3rem;">@i</button>
                }
                <button @onclick="SiguientePagina" disabled="@(!PuedeAvanzar)">Siguiente</button>
            </div>
        }
    </section>
</main>

@if (mostrarModalFavoritos)
{
    <div style="position: fixed; top:0; left:0; width:100vw; height:100vh; background-color: rgba(0,0,0,0.6); display:flex; justify-content:center; align-items:center; z-index:1000;">
        <div style="background:white; max-width: 600px; width: 90%; max-height: 80vh; overflow-y: auto; padding: 1rem; border-radius: 8px; position: relative;">
            <button @onclick="CerrarModalFavoritos" style="position: absolute; top: 1rem; right: 1rem; font-size: 1.5rem; background:none; border:none; cursor:pointer;">&times;</button>
            <h3>Vacantes favoritas (@favoritos.Count)</h3>

            @if (favoritos.Count == 0)
            {
                <p>No tienes vacantes favoritas.</p>
            }
            else
            {
                foreach (var fav in favoritos)
                {
                    <div style="border-bottom: 1px solid #ccc; padding: 0.5rem 0;">
                        <h4>@fav.Titulo</h4>
                        <p><strong>@fav.Empresa</strong> - @fav.Ubicacion</p>
                        <p>Salario: $@fav.Salario MXN</p>
                    </div>
                }
            }
        </div>
    </div>
}

<footer style="text-align:center; padding:1rem; background:#235B4E; color:white; margin-top: 2rem;">
    &copy; 2025 Portal de Empleo - Todos los derechos reservados.
</footer>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "que")]
    public string? Que { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "donde")]
    public string? Donde { get; set; }

    private List<Job> jobResults = new();
    private List<Job> favoritos = new();
    private FilterModel filterModel = new();
    private string _sortCriteria = "fecha";

    private int paginaActual = 1;
    private int vacantesPorPagina = 5;
    private bool mostrarModalFavoritos = false;

    private string sortCriteria
    {
        get => _sortCriteria;
        set
        {
            if (_sortCriteria != value)
            {
                _sortCriteria = value;
                paginaActual = 1;
                StateHasChanged();
            }
        }
    }

    private List<Job> filteredJobs => jobResults
        .Where(j =>
            (string.IsNullOrEmpty(filterModel.Tipo) || j.Tipo == filterModel.Tipo) &&
            (string.IsNullOrEmpty(filterModel.Escolaridad) || j.Escolaridad == filterModel.Escolaridad) &&
            (string.IsNullOrEmpty(filterModel.Discapacidad) || j.Discapacidad == filterModel.Discapacidad) &&
            (filterModel.Edad == 0 || j.Edad >= filterModel.Edad) &&
            (filterModel.Salario == 0 || j.Salario >= filterModel.Salario) &&
            (string.IsNullOrEmpty(Que) || j.Titulo.Contains(Que, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(Donde) || j.Ubicacion.Contains(Donde, StringComparison.OrdinalIgnoreCase))
        ).ToList();

    private List<Job> sortedJobs => sortCriteria == "salario"
        ? filteredJobs.OrderByDescending(j => j.Salario).ToList()
        : filteredJobs.OrderByDescending(j => j.FechaPublicacion).ToList();

    private List<Job> paginatedJobs => sortedJobs
        .Skip((paginaActual - 1) * vacantesPorPagina)
        .Take(vacantesPorPagina)
        .ToList();

    private int totalPaginas => (int)Math.Ceiling((double)sortedJobs.Count / vacantesPorPagina);
    private bool PuedeRetroceder => paginaActual > 1;
    private bool PuedeAvanzar => paginaActual < totalPaginas;

    protected override async Task OnInitializedAsync()
    {
        jobResults = await Http.GetFromJsonAsync<List<Job>>("vacantes.json") ?? new List<Job>();
        await CargarFavoritos();
    }

    protected override void OnParametersSet()
    {
        paginaActual = 1;
        StateHasChanged();
    }

    private void ApplyFilters() => paginaActual = 1;
    private void CambiarPagina(int numero) => paginaActual = numero;
    private void AnteriorPagina() { if (PuedeRetroceder) paginaActual--; }
    private void SiguientePagina() { if (PuedeAvanzar) paginaActual++; }
    private bool EstaEnFavoritos(Job job) => favoritos.Any(f => f.Titulo == job.Titulo && f.Empresa == job.Empresa && f.Ubicacion == job.Ubicacion);

    private async Task ToggleFavorito(Job job)
    {
        if (EstaEnFavoritos(job)) favoritos.RemoveAll(f => f.Titulo == job.Titulo && f.Empresa == job.Empresa && f.Ubicacion == job.Ubicacion);
        else favoritos.Add(job);
        await GuardarFavoritos();
    }

    private async Task GuardarFavoritos() => await JSRuntime.InvokeVoidAsync("localStorage.setItem", "favoritos", JsonSerializer.Serialize(favoritos));

    private async Task CargarFavoritos()
    {
        var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "favoritos");
        if (!string.IsNullOrEmpty(json)) favoritos = JsonSerializer.Deserialize<List<Job>>(json) ?? new List<Job>();
    }

    private void MostrarFavoritos() => mostrarModalFavoritos = true;
    private void CerrarModalFavoritos() => mostrarModalFavoritos = false;

    public class Job
    {
        public string Titulo { get; set; } = string.Empty;
        public string Empresa { get; set; } = string.Empty;
        public string Ubicacion { get; set; } = string.Empty;
        public string Descripcion { get; set; } = string.Empty;
        public string Escolaridad { get; set; } = string.Empty;
        public string Experiencia { get; set; } = string.Empty;
        public string Discapacidad { get; set; } = string.Empty;
        public int Edad { get; set; }
        public decimal Salario { get; set; }
        public string Tipo { get; set; } = string.Empty;
        public DateTime FechaPublicacion { get; set; }
    }

    public class FilterModel
    {
        public string Tipo { get; set; } = string.Empty;
        public string Escolaridad { get; set; } = string.Empty;
        public string Discapacidad { get; set; } = string.Empty;

        [Range(0, 120, ErrorMessage = "Edad debe estar entre 0 y 120")]
        public int Edad { get; set; }

        [Range(0, 1000000, ErrorMessage = "Salario no puede ser negativo")]
        public decimal Salario { get; set; }
    }
}